// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "line-wallet/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITransactionService is a mock of ITransactionService interface.
type MockITransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionServiceMockRecorder
}

// MockITransactionServiceMockRecorder is the mock recorder for MockITransactionService.
type MockITransactionServiceMockRecorder struct {
	mock *MockITransactionService
}

// NewMockITransactionService creates a new mock instance.
func NewMockITransactionService(ctrl *gomock.Controller) *MockITransactionService {
	mock := &MockITransactionService{ctrl: ctrl}
	mock.recorder = &MockITransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionService) EXPECT() *MockITransactionServiceMockRecorder {
	return m.recorder
}

// AddIncome mocks base method.
func (m *MockITransactionService) AddIncome(req models.Income, member models.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIncome", req, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIncome indicates an expected call of AddIncome.
func (mr *MockITransactionServiceMockRecorder) AddIncome(req, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIncome", reflect.TypeOf((*MockITransactionService)(nil).AddIncome), req, member)
}

// AddTransaction mocks base method.
func (m *MockITransactionService) AddTransaction(req models.AddTransactionRequest, member *models.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", req, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockITransactionServiceMockRecorder) AddTransaction(req, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockITransactionService)(nil).AddTransaction), req, member)
}

// EditIncomeByID mocks base method.
func (m *MockITransactionService) EditIncomeByID(req models.Income, id string, member models.Member) (*models.Income, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditIncomeByID", req, id, member)
	ret0, _ := ret[0].(*models.Income)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditIncomeByID indicates an expected call of EditIncomeByID.
func (mr *MockITransactionServiceMockRecorder) EditIncomeByID(req, id, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditIncomeByID", reflect.TypeOf((*MockITransactionService)(nil).EditIncomeByID), req, id, member)
}

// EditTransactionByID mocks base method.
func (m *MockITransactionService) EditTransactionByID(req models.AddTransactionRequest, id string, member models.Member) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTransactionByID", req, id, member)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTransactionByID indicates an expected call of EditTransactionByID.
func (mr *MockITransactionServiceMockRecorder) EditTransactionByID(req, id, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTransactionByID", reflect.TypeOf((*MockITransactionService)(nil).EditTransactionByID), req, id, member)
}

// GetIncomeByID mocks base method.
func (m *MockITransactionService) GetIncomeByID(ID string) (*models.Income, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeByID", ID)
	ret0, _ := ret[0].(*models.Income)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeByID indicates an expected call of GetIncomeByID.
func (mr *MockITransactionServiceMockRecorder) GetIncomeByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeByID", reflect.TypeOf((*MockITransactionService)(nil).GetIncomeByID), ID)
}

// GetTransactionByID mocks base method.
func (m *MockITransactionService) GetTransactionByID(ID string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockITransactionServiceMockRecorder) GetTransactionByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockITransactionService)(nil).GetTransactionByID), ID)
}

// GetTreansactions mocks base method.
func (m *MockITransactionService) GetTreansactions(line_user_id string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreansactions", line_user_id)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreansactions indicates an expected call of GetTreansactions.
func (mr *MockITransactionServiceMockRecorder) GetTreansactions(line_user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreansactions", reflect.TypeOf((*MockITransactionService)(nil).GetTreansactions), line_user_id)
}

// Ping mocks base method.
func (m *MockITransactionService) Ping() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(string)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockITransactionServiceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockITransactionService)(nil).Ping))
}

// SummaryCurrentMonth mocks base method.
func (m *MockITransactionService) SummaryCurrentMonth(replyToken, line_user_id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SummaryCurrentMonth", replyToken, line_user_id)
}

// SummaryCurrentMonth indicates an expected call of SummaryCurrentMonth.
func (mr *MockITransactionServiceMockRecorder) SummaryCurrentMonth(replyToken, line_user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryCurrentMonth", reflect.TypeOf((*MockITransactionService)(nil).SummaryCurrentMonth), replyToken, line_user_id)
}
